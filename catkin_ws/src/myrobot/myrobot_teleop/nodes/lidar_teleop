#!/usr/bin/env python
import random
import rospy
import numpy as np
from geometry_msgs.msg import Twist
from sensor_msgs.msg import LaserScan

MAX_LIN_SPEED = 1
MAX_ANG_SPEED = 2
VELOCITY_INCREMENT = 0.05

TURN_MIN_DISTANCE = 3
TURN_COUNTER_MAX = 20
IGNORE_TURN_COUNTER_MAX = 80

FRONT_COLLISION_DISTANCE = 0.55
SIDE_COLLISION_DISTANCE = 0.7
OBSTACLE_COUNTER_THRESHOLD = 30

SCAN_TOPIC = '/myrobot/rplidar/scan'

class LidarTeleopController:
    def __init__(self):
        rospy.init_node('lidar_teleop')

        cmd_vel_topic = rospy.get_param('/lidar_teleop/cmd_vel', '/cmd_vel')
        rospy.loginfo('Cmd Vel topic: ' + cmd_vel_topic)

        self.publisher = rospy.Publisher(cmd_vel_topic, Twist, queue_size=10)

        self.move_forward_flag = False
        self.move_backward_flag = False
        self.steer_left_flag = False
        self.steer_right_flag = False

        self.linear_state_modifier = 0
        self.angular_state_modifier = 0
        self.linear_target_speed = 0.0
        self.angular_target_speed = 0.0

        self.left_range_val = 0
        self.right_range_val = 0
        self.front_left_val = 0
        self.front_center_val = 0
        self.front_right_val = 0

        self.obstacle_counter = 0
        self.ignore_turn_counter = IGNORE_TURN_COUNTER_MAX
        self.turning_counter = TURN_COUNTER_MAX

        self.corrective_left_flag = False
        self.corrective_right_flag = False

        self.stop_needed_flag = False
        self.turn_left_flag = False
        self.turn_right_flag = False
        self.turn_back_flag = False

        self.last_turn_direction = ""

        self.lidar_subscriber = None

        self.obstacle_counter_reset = False

        self.dummy_counter = 1

    def execute(self):
        self.lidar_subscriber = rospy.Subscriber(SCAN_TOPIC, LaserScan, callback=self.process_lidar_data)
        loop_rate = rospy.Rate(10)
        try:
            while not rospy.is_shutdown():
                self.refresh_status()
                loop_rate.sleep()
        except rospy.ROSInterruptException:
            pass
        self.lidar_subscriber.unregister()

    def refresh_status(self):
        self.adjust_control_flags()
        self.compute_velocity()
        self.debug_log()
        command = Twist()
        command.linear.x = self.linear_target_speed
        command.linear.y = 0.0
        command.linear.z = 0.0
        command.angular.x = 0.0
        command.angular.y = 0.0
        command.angular.z = self.angular_target_speed
        self.publisher.publish(command)

    def adjust_control_flags(self):
        self.adjust_correction_flags()

        if self.stop_needed_flag:
            self.move_forward_flag = False
            if self.turn_back_flag:
                self.move_forward_flag = False
                self.move_backward_flag = False
                if self.front_left_val < self.front_right_val:
                    self.steer_left_flag = 1  # bool(random.getrandbits(1))
                    self.steer_right_flag = 0  # not self.steer_left_flag
                elif self.front_left_val > self.front_right_val:
                    self.steer_left_flag = 0  # bool(random.getrandbits(1))
                    self.steer_right_flag = 1  # not self.steer_left_flag
                else:
                    self.steer_left_flag = 0  # bool(random.getrandbits(1))
                    self.steer_right_flag = 0  # not self.steer_left_flag
            else:
                self.move_backward_flag = True
                self.steer_left_flag = self.corrective_right_flag
                self.steer_right_flag = self.corrective_left_flag
        else:
            self.adjust_turning_flags()
            self.move_backward_flag = False
            if self.turn_left_flag or self.turn_right_flag:
                self.move_forward_flag = True
                self.steer_left_flag = self.turn_left_flag
                self.steer_right_flag = self.turn_right_flag
            else:
                self.move_forward_flag = True
                self.steer_left_flag = self.corrective_left_flag
                self.steer_right_flag = self.corrective_right_flag

    def adjust_correction_flags(self):
        self.stop_needed_flag = (
            self.front_center_val < FRONT_COLLISION_DISTANCE or 
            self.obstacle_counter >= OBSTACLE_COUNTER_THRESHOLD
        )
        self.turn_back_flag = self.obstacle_counter >= OBSTACLE_COUNTER_THRESHOLD
        if self.obstacle_counter >= OBSTACLE_COUNTER_THRESHOLD and not self.obstacle_counter_reset:
            self.obstacle_counter_reset = True

        left_obstacle = self.front_left_val < SIDE_COLLISION_DISTANCE
        right_obstacle = self.front_right_val < SIDE_COLLISION_DISTANCE

        if left_obstacle or right_obstacle:
            self.obstacle_counter += 2
        else:
            self.obstacle_counter -= 1
            if self.obstacle_counter < 0:
                self.obstacle_counter = 0

        if left_obstacle or right_obstacle:
            self.corrective_left_flag = self.front_left_val > self.front_right_val
            self.corrective_right_flag = not self.corrective_left_flag
        else:
            self.corrective_left_flag = False
            self.corrective_right_flag = False

    def adjust_turning_flags(self):
        if self.ignore_turn_counter >= IGNORE_TURN_COUNTER_MAX:
            can_turn_left = self.left_range_val > TURN_MIN_DISTANCE
            can_turn_right = self.right_range_val > TURN_MIN_DISTANCE

            if can_turn_left or can_turn_right:
                self.ignore_turn_counter = 0
                if bool(random.getrandbits(1)):
                    self.turning_counter = 0
                    if can_turn_left and can_turn_right:
                        self.turn_left_flag = bool(random.getrandbits(1))
                        self.turn_right_flag = not self.turn_left_flag
                    else:
                        self.turn_left_flag = can_turn_left
                        self.turn_right_flag = can_turn_right
                    if self.turn_left_flag:
                        self.last_turn_direction = "left"
                    else:
                        self.last_turn_direction = "right"
                else:
                    self.last_turn_direction = "forward"
        else:
            self.ignore_turn_counter += 1

        if self.turning_counter >= TURN_COUNTER_MAX:
            self.turn_left_flag = False
            self.turn_right_flag = False
        else:
            self.turning_counter += 1

    def compute_velocity(self):
        if self.move_forward_flag and self.move_backward_flag:
            self.linear_state_modifier = 0
        elif self.move_forward_flag:
            self.linear_state_modifier = min(max(0, self.linear_state_modifier + VELOCITY_INCREMENT), 1)
        elif self.move_backward_flag:
            self.linear_state_modifier = max(min(0, self.linear_state_modifier - VELOCITY_INCREMENT), -1)
        else:
            self.linear_state_modifier = 0

        if self.steer_left_flag and self.steer_right_flag:
            self.angular_state_modifier = 0
        elif self.steer_left_flag:
            self.angular_state_modifier = 1
        elif self.steer_right_flag:
            self.angular_state_modifier = -1
        else:
            self.angular_state_modifier = 0

        self.linear_target_speed = MAX_LIN_SPEED * self.linear_state_modifier
        self.angular_target_speed = MAX_ANG_SPEED * self.angular_state_modifier

    def process_lidar_data(self, msg):
        data = np.array(msg.ranges)
        self.left_range_val = np.min(data[95:105])
        self.right_range_val = np.min(data[265:275])
        self.front_left_val = np.min(data[15:45])
        self.front_center_val = min(np.min(data[345:]), np.min(data[:15]))
        self.front_right_val = np.min(data[315:345])

    def debug_log(self):
        self.dummy_counter = 1
        print(f'Left side: {self.left_range_val:6.3f}, Right side: {self.right_range_val:6.3f}')
        print(f'Front left: {self.front_left_val:6.3f}, Front center: {self.front_center_val:6.3f}, Front right: {self.front_right_val:6.3f}')
        print(f'Ignore turn counter: {self.ignore_turn_counter:d}, Turn counter: {self.turning_counter:d}')
        print(f'Turn left: {self.turn_left_flag}, Turn right: {self.turn_right_flag}')
        print(f'Last direction: {self.last_turn_direction:s}')
        print(f'Obstacle counter: {self.obstacle_counter:d}')
        print(f'Stop needed: {self.stop_needed_flag}, Turn back: {self.turn_back_flag}')
        print(f'Corrective left: {self.corrective_left_flag}, Corrective right: {self.corrective_right_flag}')
        print(f'Forward: {self.move_forward_flag}, Backward: {self.move_backward_flag}, Left: {self.steer_left_flag}, Right: {self.steer_right_flag}')
        print('=======================================================')

if __name__ == "__main__":
    controller = LidarTeleopController()
    controller.execute()
